// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      UserRole  @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  reviews   Review[]
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  openingHours String?
  cuisineType String?
  priceRange  String?
  rating      Float     @default(0)
  numReviews  Int       @default(0)
  imageUrl    String?
  menuItems   MenuItem[]
  orders      Order[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MenuItem {
  id           Int        @id @default(autoincrement())
  name         String
  description String?
  price        Float
  category     String
  imageUrl     String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  orderItems   OrderItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Order {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  items        OrderItem[]
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  deliveryAddress String
  phoneNumber  String
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  ADMIN
  RESTAURANT_OWNER
  CUSTOMER
  DELIVERY_PERSONNEL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
